{"version":3,"sources":["components/shared/FormField.tsx","pages/admin/UserForm.tsx","pages/admin/Users.tsx"],"names":["useStyles","makeStyles","theme","formLabel","fontWeight","marginBottom","spacing","formControl","margin","FormField","isRegister","classes","useFormikContext","values","handleChange","handleBlur","errors","touched","fullWidth","className","root","name","value","username","onChange","onBlur","placeholder","helperText","error","Boolean","email","type","password","flexGrow","card","padding","maxWidth","btnLogin","marginTop","marginRight","accordion","UserForm","user","dispatch","useDispatch","initialValues","validationSchema","Yup","required","Accordion","AccordionSummary","expandIcon","id","_id","Typography","AccordionDetails","Grid","container","direction","alignItems","justifyContent","enableReinitialize","onSubmit","setSubmitting","updateUser","isSubmitting","handleSubmit","noValidate","Button","variant","color","size","disabled","CircularProgress","onClick","e","deleteUser","Users","styles","admin","useSelector","state","React","getUsers","document","title","users","map"],"mappings":"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","file":"static/js/8.55ac6e1a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { FormControl, FormLabel, TextField } from \"@material-ui/core\";\r\nimport { useFormikContext } from \"formik\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formLabel: {\r\n    fontWeight: 600,\r\n    marginBottom: theme.spacing(1.5),\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(2, 0),\r\n  },\r\n}));\r\n\r\ntype Props = {\r\n  isRegister?: boolean;\r\n};\r\n\r\ninterface IValues {\r\n  username: string;\r\n  email?: string;\r\n  password: string;\r\n}\r\n\r\nconst FormField: React.FC<Props> = ({ isRegister = false }): JSX.Element => {\r\n  const classes = useStyles();\r\n  const { values, handleChange, handleBlur, errors, touched } =\r\n    useFormikContext<IValues>();\r\n\r\n  return (\r\n    <>\r\n      <FormControl fullWidth className={classes.formControl}>\r\n        <FormLabel classes={{ root: classes.formLabel }}>Username</FormLabel>\r\n        <TextField\r\n          fullWidth\r\n          name='username'\r\n          value={values.username}\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n          placeholder='Enter username'\r\n          helperText={touched.username ? errors.username : \"\"}\r\n          error={touched.username ? Boolean(errors.username) : false}\r\n        />\r\n      </FormControl>\r\n      {isRegister ? (\r\n        <FormControl fullWidth className={classes.formControl}>\r\n          <FormLabel classes={{ root: classes.formLabel }}>Email</FormLabel>\r\n          <TextField\r\n            fullWidth\r\n            name='email'\r\n            value={values.email}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            placeholder='Enter email'\r\n            helperText={touched.email ? errors.email : \"\"}\r\n            error={touched.email ? Boolean(errors.email) : false}\r\n          />\r\n        </FormControl>\r\n      ) : null}\r\n      <FormControl fullWidth className={classes.formControl}>\r\n        <FormLabel classes={{ root: classes.formLabel }}>Password</FormLabel>\r\n        <TextField\r\n          fullWidth\r\n          type='password'\r\n          name='password'\r\n          value={values.password}\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n          placeholder='Enter password'\r\n          helperText={touched.password ? errors.password : \"\"}\r\n          error={touched.password ? Boolean(errors.password) : false}\r\n        />\r\n      </FormControl>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FormField;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Grid, Button, CircularProgress } from \"@material-ui/core\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport Accordion from \"@mui/material/Accordion\";\r\nimport AccordionSummary from \"@mui/material/AccordionSummary\";\r\nimport AccordionDetails from \"@mui/material/AccordionDetails\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport FormField from \"components/shared/FormField\";\r\nimport { updateUser, deleteUser } from \"redux/actions/admin\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  card: {\r\n    padding: theme.spacing(6),\r\n    maxWidth: \"675px\",\r\n    margin: \"auto\",\r\n  },\r\n  btnLogin: {\r\n    marginTop: theme.spacing(1.5),\r\n    marginRight: theme.spacing(1),\r\n    padding: theme.spacing(1.5, 3),\r\n  },\r\n  accordion: {\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n}));\r\n\r\ntype Props = {\r\n  user: any;\r\n};\r\n\r\ninterface IInitialValues {\r\n  username: string;\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nconst UserForm: React.FC<Props> = ({ user }): JSX.Element => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n\r\n  const initialValues: IInitialValues = {\r\n    username: user?.username ?? \"\",\r\n    email: user?.email ?? \"\",\r\n    password: \"\",\r\n  };\r\n\r\n  const onHandleSubmit = (\r\n    values: IInitialValues,\r\n    { setSubmitting }: any\r\n  ): Promise<void> =>\r\n    dispatch<any>(updateUser(values, user._id, setSubmitting));\r\n\r\n  const validationSchema = Yup.object({\r\n    username: Yup.string().required(\"required!\"),\r\n    email: Yup.string().email(\"Invalid email!\").required(\"required!\"),\r\n    password: Yup.string().required(\"required!\"),\r\n  });\r\n\r\n  return (\r\n    <Accordion className={classes.accordion}>\r\n      <AccordionSummary\r\n        expandIcon={<ExpandMoreIcon />}\r\n        aria-controls='panel1a-content'\r\n        id={`panel1a-header-${user._id}`}\r\n      >\r\n        <Typography>{user?.username ?? null}</Typography>\r\n      </AccordionSummary>\r\n      <AccordionDetails>\r\n        <Grid\r\n          container\r\n          className={classes.root}\r\n          direction='column'\r\n          alignItems='center'\r\n          justifyContent='center'\r\n        >\r\n          <Formik\r\n            enableReinitialize\r\n            initialValues={initialValues}\r\n            validationSchema={validationSchema}\r\n            onSubmit={onHandleSubmit}\r\n          >\r\n            {({ isSubmitting, handleSubmit }) => (\r\n              <form noValidate onSubmit={handleSubmit}>\r\n                <FormField isRegister={true} />\r\n                <Button\r\n                  type='submit'\r\n                  variant='contained'\r\n                  color='primary'\r\n                  size='small'\r\n                  className={classes.btnLogin}\r\n                  disabled={isSubmitting}\r\n                >\r\n                  {isSubmitting ? <CircularProgress size='1rem' /> : \"Update\"}\r\n                </Button>\r\n                <Button\r\n                  type='button'\r\n                  variant='contained'\r\n                  color='secondary'\r\n                  size='small'\r\n                  className={classes.btnLogin}\r\n                  onClick={(e) => dispatch(deleteUser(user._id))}\r\n                >\r\n                  Delete\r\n                </Button>\r\n              </form>\r\n            )}\r\n          </Formik>\r\n        </Grid>\r\n      </AccordionDetails>\r\n    </Accordion>\r\n  );\r\n};\r\n\r\nexport default UserForm;\r\n","import * as React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport UserForm from \"./UserForm\";\r\nimport { getUsers } from \"redux/actions/admin\";\r\nimport { RootState } from \"redux/reducers\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    maxWidth: \"60%\",\r\n    margin: \"auto\",\r\n  },\r\n}));\r\n\r\nconst Users: React.FC = (): JSX.Element => {\r\n  const styles = useStyles();\r\n  const dispatch = useDispatch();\r\n  const admin = useSelector((state: RootState) => state.admin);\r\n\r\n  React.useEffect(() => {\r\n    dispatch(getUsers());\r\n  }, [dispatch]);\r\n\r\n  React.useEffect(() => {\r\n    document.title = \"Admin Panel\";\r\n  }, []);\r\n\r\n  return (\r\n    <div className={styles.root}>\r\n      {admin.users?.map((user: any) => (\r\n        <UserForm user={user} key={user._id} />\r\n      )) ?? <p>No Users Found.</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Users;\r\n"],"sourceRoot":""}